// if it is reasonably generic, don't put it in an object?
// if it's interchangable/swappable, use objects
// The issue is that reasonably generic functions may need to be swapped later because of changes
// Maybe a more efficiant approach is needed? Maybe the current function doesn't allow for a certain kind of useful extendability
// Maybe an extern function() would be used instead of a whole class definition though

// A class/object makes more sense where we need to assign a function or we need to alter some kind of state
// keep the assign a function thought in mind though because some languages can have functions as variables and even functions with state as variables

// In which case when do we even use classes? Well, classes are a good and easy way of interfacing. I don't think functions can inherit from an interface
// The exception being .h files where you can change the .cpp file defining the function

// I guess try to match the way the code currently is, if everything is an object keep that style
// For personal code I don't think I'll use objects as a way to structure code
// I'll use them when being able to assign an object provides a nicely structured solution though
// ie linked lists, commands, etc.
